{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9; //^0.8.8 3;13\n\nimport \"./PriceConverter.sol\";\n\n\n\ncontract FundMe {\n    using PriceConverter for uint256;\n\n    uint256 public constant MINIMUM_USD = 5;\n\n    address[] public funders;\n    mapping(address => uint256) addressToAmountFunded;\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n\n        require(msg.value.getConversionRate(priceFeed)  > MINIMUM_USD, \"Didn't send enough!\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] +=msg.value;\n    }\n    \n    function withdraw() public onlyOwner{\n\n\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++){\n            address funder= funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n\n        funders = new address[](0);\n\n        \n        (bool callSuccess,) = payable(msg.sender).call{value:address(this).balance}(\"\");\n        require(callSuccess,\"Call failed\");\n    }\n\n    modifier onlyOwner {\n         require(msg.sender == i_owner, \"Sender is not owner!\");\n         _;\n    }\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n\n    "
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9; //^0.8.8 3;13\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256) {\r\n        //abi\r\n        //Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n         (,int price,,,) = priceFeed.latestRoundData();\r\n\r\n         return uint256(price*1e10);\r\n\r\n    }\r\n\r\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed) internal  view returns(uint256){\r\n\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}